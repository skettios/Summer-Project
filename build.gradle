buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
    }
}

apply plugin: 'java'
apply plugin: 'distribution'

ext.configFile = file 'build.properties'

configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    ext {
        appName = 'Summer-Project'
		buildNumber = System.getenv().get("BUILD_NUMBER") ?: 'dev'
        gdxVersion = '1.6.1'
        roboVMVersion = '1.2.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.4.0'
        aiVersion = '1.5.0'
    }
	
	version = "${config.majorVersion}.${config.minorVersion}.${buildNumber}"

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.kotcrab.vis:vis-ui:0.7.7"
		compile "org.apache.logging.log4j:log4j-core:2.3"
		compile "net.lingala.zip4j:zip4j:1.3.2"
		compile "com.jtattoo:JTattoo:1.6.11"
        compile fileTree(dir: '../libs', include: 'jnlua-1.0.4.jar')
        compile fileTree(dir: '../libs', include: 'jnlua-1.0.4-natives.jar')
    }
}

distributions {
    main {
        baseName = "${appName}"
        contents {
            from { 'desktop/build/libs' }
            from ('core/assets') {
                // Directories
				exclude 'logs'
                exclude 'scripts'
                exclude 'base'
                exclude 'audio'
                exclude 'textures'

                // Files
                exclude '**/*.cfg'
                exclude '**/*.xml'
                exclude '**/*.json'
                exclude '**/*.png'
            }
            from { 'build/data' }
        }
    }
}

distTar {
    archiveName "${appName}-${version}.tar"
}

distZip {
    archiveName "${appName}-${version}.zip"
}

task dist() {
    doFirst {
        println "Compiling & Packaging for ${appName}!"
        delete('build')

        packBase.execute();
        packTextures.execute();
        packAudio.execute();
    }

    doLast {
        distTar.execute();
        distZip.execute();
    }
}

task packBase(type: Zip) {
    println 'Packing base...'

    archiveName = 'base.spp'
    destinationDir = file('build/data')

    from files('core/assets/base') {
        exclude '**/*.psd'
    }
}

task packTextures(type: Zip) {
    println 'Packing textures...'

    archiveName = 'textures.spp'
    destinationDir = file('build/data')

    from files('core/assets/textures') {
        exclude '**/*.psd'
    }
}

task packAudio(type: Zip) {
    println 'Packing audio...'

    archiveName = 'audio.spp'
    destinationDir = file('build/data')

    from files('core/assets/audio') {
        exclude '**/*.psd'
    }
}

dist.dependsOn 'desktop:dist'

tasks.eclipse.doLast {
    delete ".project"
}